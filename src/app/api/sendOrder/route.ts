import { gql } from "@/graphql/client";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  const data = await request.json();
  try {
    const { orderId } = data?.object.metadata;

    const orderItem = await gql.GetOrderById({ id: orderId });

    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    if (!token || !chatId) {
      console.error("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");

      return NextResponse.json(
        { message: "TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" },
        { status: 500 },
      );
    }

    // const message = `
    // üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*:
    // - *–ò–º—è*: ${orderItem.orders_by_id.name}
    // - *Email*: ${orderItem.orders_by_id.email}
    // - *–¢–µ–ª–µ—Ñ–æ–Ω*: ${orderItem.orders_by_id.phone}
    // - *–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏*: ${orderItem.orders_by_id.isDelivery ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–≤–æ–∑"}
    // ${orderItem.orders_by_id.isDelivery && orderItem.orders_by_id.address ? `- *–ê–¥—Ä–µ—Å*: ${orderItem.orders_by_id.address}` : ""}
    // - *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: ${orderItem.orders_by_id.comment || "–ù–µ—Ç"}
    // - *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å*: ${orderItem.orders_by_id.totalPrice}‚ÇΩ
    // - *–ö–æ—Ä–∑–∏–Ω–∞*:
    // ${
    //   orderItem.orders_by_id.basket
    //     ?.map((item) => {
    //       return `  ‚Ä¢ ${item.name} x${item.count} - ${item.totalPrice}‚ÇΩ
    //     ${item.modificators.length > 0 ? `    –î–æ–±–∞–≤–∫–∏: ${item.modificators}` : ""}`;
    //     })
    //     .join("\n") || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    // }
    // `;

    const message = `
    üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*:
    - *–ò–º—è*: ${orderItem.orders_by_id.name}
    - *–¢–µ–ª–µ—Ñ–æ–Ω*: ${orderItem.orders_by_id.phone}
    - *–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏*: ${orderItem.orders_by_id.isDelivery ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–≤–æ–∑"}
    ${orderItem.orders_by_id.isDelivery && orderItem.orders_by_id.address ? `- *–ê–¥—Ä–µ—Å*: ${orderItem.orders_by_id.address}` : ""}
    - *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: ${orderItem.orders_by_id.comment || "–ù–µ—Ç"}
    - *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å*: ${orderItem.orders_by_id.totalPrice}‚ÇΩ
    - *–ö–æ—Ä–∑–∏–Ω–∞*:
    ${
      orderItem.orders_by_id.basket
        ?.map((item) => {
          return `  ‚Ä¢ ${item.name} x${item.count} - ${item.totalPrice}‚ÇΩ${item.modificators.length > 0 ? ` (${item.modificators})` : ""}`;
        })
        .join("\n") || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    }
    `;

    // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        }),
      },
    );

    const telegramData = await telegramResponse.json();

    if (!telegramData.ok) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", telegramData);
      return NextResponse.json(
        { message: "Failed to send message to Telegram" },
        { status: 500 },
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json(
      { message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", data: "test" },
      { status: 200 },
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ sendOrder:", error);
    return NextResponse.json(
      { message: "Internal Server Error" },
      { status: 500 },
    );
  }
}
